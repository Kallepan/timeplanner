// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/google/wire"
	"planner-backend/app/controller"
	"planner-backend/app/repository"
	"planner-backend/app/service"
	"planner-backend/config"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context) (*config.Injector, func(), error) {
	driverWithContext := config.ConnectToDB(ctx)
	systemControllerImpl := &controller.SystemControllerImpl{}
	departmentRepositoryImpl := repository.DepartmentRepositoryInit(driverWithContext, ctx)
	departmentServiceImpl := &service.DepartmentServiceImpl{
		DepartmentRepository: departmentRepositoryImpl,
	}
	departmentControllerImpl := &controller.DepartmentControllerImpl{
		DepartmentService: departmentServiceImpl,
	}
	workplaceRepositoryImpl := repository.WorkplaceRepositoryInit(driverWithContext, ctx)
	workplaceServiceImpl := &service.WorkplaceServiceImpl{
		WorkplaceRepository: workplaceRepositoryImpl,
	}
	workplaceControllerImpl := &controller.WorkplaceControllerImpl{
		WorkplaceService: workplaceServiceImpl,
	}
	timeslotRepositoryImpl := repository.TimeslotRepositoryInit(driverWithContext, ctx)
	timeslotServiceImpl := &service.TimeslotServiceImpl{
		TimeslotRepository: timeslotRepositoryImpl,
	}
	timeslotControllerImpl := &controller.TimeslotControllerImpl{
		TimeslotService: timeslotServiceImpl,
	}
	weekdayRepositoryImpl := repository.WeekdayRepositoryInit(driverWithContext, ctx)
	weekdayServiceImpl := &service.WeekdayServiceImpl{
		WeekdayRepository:  weekdayRepositoryImpl,
		TimeslotRepository: timeslotRepositoryImpl,
	}
	weekdayControllerImpl := &controller.WeekdayControllerImpl{
		WeekdayService: weekdayServiceImpl,
	}
	personRepositoryImpl := repository.PersonRepositoryInit(driverWithContext, ctx)
	personServiceImpl := &service.PersonServiceImpl{
		PersonRepository: personRepositoryImpl,
	}
	personControllerImpl := &controller.PersonControllerImpl{
		PersonService: personServiceImpl,
	}
	personRelRepositoryImpl := repository.PersonRelRepositoryInit(driverWithContext, ctx)
	personRelServiceImpl := service.PersonRelServiceImpl{
		PersonRelRepository:  personRelRepositoryImpl,
		PersonRepository:     personRepositoryImpl,
		DepartmentRepository: departmentRepositoryImpl,
		WorkplaceRepository:  workplaceRepositoryImpl,
	}
	personRelControllerImpl := &controller.PersonRelControllerImpl{
		PersonRelService: personRelServiceImpl,
	}
	workdayRepositoryImpl := repository.WorkdayRepositoryInit(driverWithContext, ctx)
	workdayServiceImpl := &service.WorkdayServiceImpl{
		WorkdayRepository: workdayRepositoryImpl,
	}
	workdayControllerImpl := &controller.WorkdayControllerImpl{
		WorkdayService: workdayServiceImpl,
	}
	synchronizeRepositoryImpl := repository.SynchronizeRepositoryInit(driverWithContext, ctx)
	injector := &config.Injector{
		DB:              driverWithContext,
		SystemCtrl:      systemControllerImpl,
		DepartmentCtrl:  departmentControllerImpl,
		WorkplaceCtrl:   workplaceControllerImpl,
		TimeslotCtrl:    timeslotControllerImpl,
		WeekdayCtrl:     weekdayControllerImpl,
		PersonCtrl:      personControllerImpl,
		PersonRelCtrl:   personRelControllerImpl,
		WorkdayCtrl:     workdayControllerImpl,
		SynchronizeRepo: synchronizeRepositoryImpl,
	}
	return injector, func() {
	}, nil
}

// wire.go:

var db = wire.NewSet(config.ConnectToDB)

var InjectorSet = wire.NewSet(wire.Struct(new(config.Injector), "*"))
